## Git Assignment

#=======================================================================
## PART A
#=======================================================================

- Create a folder ninja at the root level of your cloned code
- Add a file README.md with content "Trying fast forward merge" in  ninja folder
- Create a branch ninja and move to it
- Run git status command
- Commit your changes to ninja branch
- Merge ninja branch to master branch make sure that a new commit get's created
- Assuming you are in the master branch, modify README.md with content "Changes in master branch", commit the changes in master branch.
- Switch to ninja branch, modify README.md with content "Changes in ninja branch", commit the changes in ninja branch.
- Merge the ninja branch to the master branch in such a fashion that a merge conflict is generated and resolve it using the ours and theirs concept so that the changes of the ninja branch overrides changes in master branch.

## Good To Do
- Simulate the above scenarios using rebase

#=======================================================================
## PART B
#=======================================================================

- Write a script to manage branches
    - Must
        - List branches
        - Create branch
        - Delete branch
        - Merge 2 branches
        - Rebase 2 branches
e.g:
```
./gitBranches.sh  -l 

output: 
master 
ninja

./gitBranch.sh -b <branch_name>
./gitBranch.sh -d <branch_name>
./gitBranch.sh -m -1 <branch_name1> -2 <branch_name2> ----> which means branch_name1 branch is going to merge into branch_name2 branch 
./gitBranch.sh -r -1 <branch_name1> -2 <branch_name2>---- which means branch_name1 branch is going to rebase on branch_name2 branch
```
#=======================================================================
## PART C
#=======================================================================
- Write a script to manage tags
    - Must
        - Create tag
        - List tags
        - Delete tag
e.g:        
```
./gitTags.sh  -t <tag_name>
./gitTags.sh  -t ninja_1.0
./gitTags.sh  -t ninja_1.1
./gitTags.sh  -l 
output :
ninja_1.0
ninja_1.1
./gitTags.sh  -d <tag_name>
./gitTags.sh  -d ninja_1.0
````
#=======================================================================
## PART D
#=======================================================================
- Write a script to generate commit report of a repo
    - Input
        - Repo url
        - days for which report to be generated
    - Output
        - Commit Id
        - Author name
        - Autoher EMail
        - Commit Message
        - Changed Files lists
    - Must Do
        - Report in html or csv format